\documentclass[lualatex,12pt,aspectratio=169]{beamer}

\usepackage{polyglossia}
\setmainlanguage{bulgarian}
\setotherlanguage{english}
\usepackage{multirow}
\usepackage{url}
\usepackage{pmboxdraw}

\usepackage[
    type={CC},
    modifier={by-sa},
    version={4.0},
]{doclicense}

\usepackage{graphicx}
\graphicspath{ {./images/} }

\usepackage{listingsutf8}

\setsansfont{freeserif}
\setmainfont{freeserif}
\setmonofont{CMU Typewriter Text}

\lstset{
    extendedchars=false,
    language=C,
    inputencoding=utf8
}

% Pick one from https://deic-web.uab.cat/~iblanes/beamer_gallery/index.html 
\usetheme{Antibes}
% Pick one from https://deic-web.uab.cat/~iblanes/beamer_gallery/index_by_color.html
\usecolortheme{seagull}

\logo{
  \def\svgwidth{2cm}
  \input{./images/Logo_svg.pdf_tex}
}

\title{ Системно програмиране за Линукс }
\subtitle{ упражнения }
\author{Димитър Димитров}
\institute{
  \def\svgwidth{5cm}
  \input{./images/Logo_MMS_svg.pdf_tex}
}
\date{01.04.2021}


\begin{document}
\begin{frame}
  \titlepage
\end{frame}

\begin{frame}
  \def\svgwidth{\paperwidth}
  \input{./images/Title_slide.pdf_tex}
\end{frame}

\begin{frame}
  \doclicenseThis
\end{frame}

\begin{frame}[allowframebreaks]
\frametitle{Съдържание}
\tableofcontents
\end{frame}


\section{ Подготовка }
\begin{frame}[fragile]
  \frametitle{Подготовка}
  За курса ще са необходими:
  \begin{itemize}
    \item Добро владеене на езика С.
    \item Персонален компютър или лаптоп с инсталиран Линукс.
      \begin{itemize}
        \item Възможно е стартиране на Линукс от USB флашка, без инсталация на основния диск.
	\item \url{https://ubuntu.com/tutorials/try-ubuntu-before-you-install}
      \end{itemize}
    \item Резервен вариант е да се ползва Линукс чрез локална или Web Browser виртуална машина.
      \begin{itemize}
        \item \url{https://ubuntu.com/appliance/vm}
        \item \url{https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&mem=192}
      \end{itemize}
    \item Хъс.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Относно този документ}
    Най-новата версия може да намерите на: \url{https://github.com/MM-Solutions/lsp-course} .

\end{frame}

\section{ Въведение }
\subsection { Запознаване с командния ред }
\begin{frame}[fragile]
  \frametitle{ Терминал, shell }
  \begin{itemize}
    \item Дистрибуция - що е то. Избор.
    \item Терминал.
    \item Команден ред.
      \begin{itemize}
        \item \verb|Ctrl+D|
        \item Auto-complete
      \end{itemize}
    \item Разходки из файловата система - \verb|ls|, \verb|cd|, \verb|pwd|, \verb|tree|.
    \item Текуща \verb|.| и по-горна папка \verb|..|
    \item Разделител в пътя: \verb|/|
    \item \verb|top|, \verb|ps|.
    \item su, sudo.
    \item root и останалите потребители
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  Отворете терминал и изпробвайте командите.
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Текстов редактор }
  Пробвай и избери!
  \begin{itemize}
    \item vi ← Препоръчвам!
    \begin{itemize}
      \item Има си самоучител: \verb|vimtutor|
    \end{itemize}
    \item gedit
    \item nano.
    \item emacs ← Любим редактор на множество хакери.
    \item Много, много други.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Изпълними файлове }
  \begin{itemize}
    \item UNIX permissions: \verb|chmod ugo+rwx MYFILE|
\begin{lstlisting}
drwxr-xr-x
 \./\./\./
  |  |  '---- Other
  |  '------- Group
  '---------- User owner
\end{lstlisting}
    \item ELF.
    \item Shell/Python/... scripts.
    \item Shebang.
\begin{lstlisting}
#!/bin/sh
\end{lstlisting}
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Помощ! }
  \begin{itemize}
    \item \verb|man|
    \item \verb|man 1 kill| или \verb|man 2 kill|
    \begin{itemize}
      \item \verb|man man|
    \end{itemize}
    \item \verb|apropos|
    \item \verb|whatis|
    \item \verb|help| - за вградени команди на shell
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  Създайте скрипт, който да:
  \begin{enumerate}
    \item Разпечатва един ред с текущата директория.
    \item След това разпечатва списък с файловете.
    \item Списъкът да съдържа освен имената на файловете, и техните размери, собственици и права.
  \end{enumerate}

  Съвет: Ползвайте \verb|pwd|, \verb|man ls|
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Unix shell }
  \begin{itemize}
    \item Променливи на обвивката (environment variables). \verb|printenv|
    \item Променливи на средата (shell variables).
    \item \verb|echo|
    \item \verb|PATH|
    \item \verb|cat|, \verb|echo|, \verb|less|
    \item \verb|cp|, \verb|mv|, \verb|mkdir|
    \item \verb|ln| - soft and hard.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  Направете мека и твърда връзка към скрипта от предишната задача.
  \begin{enumerate}
    \item Какъв е резултата от \verb|ls -l|
    \item Разпечатайте (\verb|cat|) съдържанието на трите файла.
    \item Изтрийте оригиналния файл. Има ли разлика в \verb|ls -l| ?
    \item Има ли валидно съдържание в двете връзки (\verb|cat|) ?
  \end{enumerate}

  Съвет: Ползвайте \verb|pwd|, \verb|man ls|
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Многозадачност с Unix Shell }
  \begin{itemize}
    \item Задачи в обвивката (shell) и процеси в OS.
    \item \verb|bg|, \verb|fg|, \verb|&|, \verb|wait|
    \item \verb|Ctrl+Z| vs \verb|Ctrl+C|
    \item \verb|jobs|
    \item \verb|kill|
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задачи }
  \begin{itemize}
    \item Изпробвайте приспиването на задачи, и поставянето им във фонов режим. 
    \begin{itemize}
      \item Съвет: Ако не се сещате за други опитни зайчета, ползвайте \verb|cat| и \verb|top|.
    \end{itemize}
    \item Кой е номерът на задачата, и кой е номерът на процеса (PID)?
    \item Изпробвайте \verb|wait| с помощта на няколко \verb|sleep 10 &| задачи.
    \item Убийте един от вашите процеси. Как ще проверите дали е "мъртъв"?
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Тръби }
  \begin{itemize}
    \item Pipes.
    \item stderr, stdout, stdin.
    \item пренасочване чрез \verb|>|, \verb|>>|, \verb|1>|, \verb|2>|
    \item \verb|tee|
    \item Филтри: \verb|grep|, \verb|sort|, \verb|wc|, \verb|cut|, \verb|xxd|
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Тръби - примери}
	Изпробвайте ги при вас!
\begin{lstlisting}
$ echo "Hello, world"
$ echo "Hello, world 1" > test.log
$ echo "Hello, world 2" > test.log
$ echo "Hello, world 3" >> test.log
$ echo "Aloha!" >> test.log
$ cat test.log
$ cat test.log | sort
$ cat test.log | xxd
$ cat /bin/ls |  xxd | head -10 | tee A.log
$ cat A.log | cut -f2- -d":"
\end{lstlisting}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Тръби - примери}
	Изпробвайте ги при вас!
\begin{lstlisting}
$ ls /bin | grep sh
$ ls /bin | grep sh | sort
$ ls /bin | sort > listing
$ cat listing
$ ls /epa-nema-takava-direktoria | sort > listing
$ cat listing
$ ls /epa-nema-takava-direktoria 2> listing
$ cat listing
\end{lstlisting}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Всичко е файл! }
  \begin{itemize}
    \item \verb|/dev| : Device filesystem.
    \item \verb|/proc| : Process filesystem.
    \item \verb|/sys| : System filesystem.
    \item Даже и тръбите: \verb|mkfifo|
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  \begin{itemize}
    \item Разузнайте \verb|dev|, \verb|/proc| и \verb|/sys|.
    \begin{itemize}
      \item Съвет: Припомнете си командите от предното упражнение: \verb|ls|, \verb|ls -l|, \verb|cd|, \verb|pwd|
      \item Съвет: За списък на всички файлове: \verb|find . -type f|
      \item Съвет: За търсене по част от име на файл: \verb|find /sys -name "*temp*"|
      \item Съвет: За търсене по име на файл: \verb|find /sys -name "temp"|
    \end{itemize}
    \item Дали \verb|cat| работи с тези файлове?
    \item Какви са странните директории наименувани с числа в \verb|/proc| ?
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  Напишете скрипт, който да разпечатва на екрана първите 160 байта от даден файл в HEX формат.

  Съвет: Ползвайте \verb|man xxd|, \verb|head|
\end{frame}

\subsection { Елементарни автоматизации с Unix Shell. }

\begin{frame}[fragile]
  \frametitle{ Shell scripts }
  \begin{itemize}
    \item Входни параметри - \verb|$#|, \verb|$@|, \verb|$0|, \verb|$1|, ...
    \item Unix SH е сложен език с много възможности ..... които няма да разглеждаме на тези упражнения. 
    \item За допълнително четене: https://linuxcommand.org/tlcl.php
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ CRON }
  Изпълнение на наши задачи в указан час.
  \begin{itemize}
    \item \verb|man crontab|
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  Направете си система за мониторинг на потребителите, които ползват вашата система. Нека всяка минута да се добавя текстова информация в \verb|$HOME/users.log| с информация за датата, и кои потребители ползват системата.

  \begin{itemize}
    \item Съвет: Ползвайте \verb|w| за списък на потребителите.
    \item Съвет: Ползвайте \verb|date| за датата.
  \end{itemize}
\end{frame}

\section { Първа Линукс програма }
\subsection { Компилатори. Крос-компилатори. Фази на компилацията. ELF контейнери. }

\begin{frame}[fragile]
  \frametitle{ Компилатори }
  \begin{itemize}
    \item GCC vs clang
    \item Крос компилатори - host vs target.
    \item \verb|man gcc|
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Фази }
  \begin{itemize}
    \item Препроцесор.
      \begin{itemize}
        \item Изход: С код
      \end{itemize}
    \item С компилатор.
      \begin{itemize}
        \item Изход: асемблерен код
      \end{itemize}
    \item Асемблер.
      \begin{itemize}
        \item Изход: обектен файл (ELF object).
      \end{itemize}
    \item Свързващ редактор (linker).
      \begin{itemize}
        \item Изход: ELF executable.
      \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ GCC - опции }
  \begin{itemize}
    \item \verb|-o OUTFILE| : в кой файл да се запише изхода.
    \item \verb|-Os|, \verb|-O0|, ... \verb|-O3| : ниво на оптимизация.
    \item \verb|-c| : да се компилира и асемблира, без свързване.
    \item \verb|-g| : да се добави debug информация.
    \item \verb|-Wall -Wextra| : да се предупреждава при съмнителен код.
    \item \verb|-Werror| : да се излиза с грешка при съмнителен код.
  \end{itemize}
  Пример:
\begin{lstlisting}
$ gcc -O2 -Wall -Wextra test.c -o test
$ file test
\end{lstlisting}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  \begin{itemize}
    \item Напишете C програма за събиране на две числа, подадени от командния ред.
    \item Програмата да е разделена в два C файла - за \verb|main()| и \verb|calc_sum()| функциите.
    \item Да има header с декларация на \verb|calc_sum()|
    \item Напишете скрипт, който компилира програмата.
    \item За по-напредналите: \verb@objdump -d calc.elf | less@
  \end{itemize}
\end{frame}

\section { Проект }
\subsection { GNU Make. Системи за построяване на софтуер. Първи проект. }

\begin{frame}[fragile]
  \frametitle{ GNU Make }
  \begin{itemize}
    \item GNU Make има множество алтернативи, но въпреки това е все още популярна.
    \item Позволява огромен контрол върху процеса на построяване (build).
    \item Правилно описани правила за построяване позволяват:
      \begin{itemize}
        \item Автоматично разпаралелване.
	\item Бързи и сигурни надстроявания (incremental builds).
      \end{itemize}
  \end{itemize}
  Запомнете:
\begin{lstlisting}
# This is a comment.
target: dependencies
	commands
\end{lstlisting}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  \begin{itemize}
    \item Напишете \verb|Makefile| за C програмата от предишното упражнение.
    \item За по-напредналите: Опитайте да направите своя \verb|Makefile| по-универсален посредством променливи.
    \item За по-напредналите: Проследете exit code при успешно и при неуспешно построяване. Ползвайте специалната променлива на \verb|sh| - \verb|$?| .
  \end{itemize}
\end{frame}

\subsection { Системи за управление на версиите. GIT, github/gitlab. }

\begin{frame}[fragile]
  \frametitle{ GIT }
  \begin{itemize}
    \item TODO.
  \end{itemize}
\begin{lstlisting}
$ git init
$ git clone https://github.com/MM-Solutions/lsp-course
$ git add *
$ git commit
$ git push
$ git log
\end{lstlisting}
\end{frame}

\begin{frame}[fragile]
  \frametitle{ Задача }
  \begin{itemize}
    \item Регистрирайте се в \url{github.com}, или \url{gitlab.com}, или \url{bitbucket.org}, или подобен.
    \item Направете си публично ГИТ хранилище (GIT project, GIT repo) с име "c-hello-world".
    \item Добавете С задачата от предишното упражнение към новото ГИТ хранилище, и я публикувайте.
    \item Добавете README.md с кратко описание, и го публикувайте като отделен GIT commit.
    \item За по-напредналите: свалете голям проект (например \url{https://github.com/torvalds/linux}), и изследвайте историята. Изпробвайте командата \verb|gitk|.
  \end{itemize}
\end{frame}

\section { Същински програми }
\subsection { Pthreads. Разпаралеляване на примерна задача (quicksort). Демонстриране на механизми за синхронизация. }

\begin{frame}[fragile]
  \frametitle{ PThreads }
  \begin{itemize}
    \item TODO.
  \end{itemize}
\end{frame}

\subsection { Pipes. Обмяна на съобщения между процеси или нишки. }
\begin{frame}[fragile]
  \frametitle{ Pipes }
  \begin{itemize}
    \item TODO.
  \end{itemize}
\end{frame}


\subsection { Mmap. Оптимизирано боравене с файлове.}
\begin{frame}[fragile]
  \frametitle{ mmap }
  \begin{itemize}
    \item TODO.
  \end{itemize}
\end{frame}


\subsection { Strace. Syscalls, ioctl. }
\begin{frame}[fragile]
  \frametitle{ strace }
  \begin{itemize}
    \item TODO.
  \end{itemize}
\end{frame}


\section { Вграден Линукс }
\subsection { GPIO, I2C - drivers in userspace. }
\begin{frame}[fragile]
  \frametitle{ Стандартни интерфейси към периферията }
  \begin{itemize}
    \item TODO.
  \end{itemize}
\end{frame}

\end{document}
